/* Initial Settings */
:root {
    /* 
    Exercise: Change DWC Custom Properties values
    Set the value of a DWC custom property here to affect the styling of your whole application
    */
    --small-width: 500px;
}

/* Ensure that window content under .winMain takes up all available space */
.winMain dwc-window-content {
    width: 100dvw;
    height: 100dvh;
}

.winMain {
    display: flex;
    max-height: 100dvh;
}

.winTaskProperties dwc-window-content > * {
    width: 100%;
}

.task {
    display: grid;
    grid-template-columns: auto auto max-content;
    grid-template-rows: auto auto auto;
    gap: 1em;
    grid-template-areas: "title title flag" 
                        "description description delete"
                        "check . .";
}

.textTitle {
    /* grid-row: 1;
    grid-column: 1 / 3; */
    grid-area: title;
    text-wrap: wrap;
}

.textDescription {
    /* grid-row: 2;
    grid-column: 2; */
    grid-area: description;
}

.priorityFlag {
    grid-area: flag;
}

.btnDelete {
    grid-area: delete;
}

.task dwc-checkbox {
    grid-area: check;
}

.dueNotice {
    justify-self: end;
}


.winTasks {
    /* ensure that you can scroll the window */
    overflow-y: scroll;
    height: 100%;
    display: flex;
    gap: 2em;
    flex-wrap: wrap;
    /* 
    Exercise: Flex Layout
    Set the display: flex; property here
    Set flex flow rules, gap, etc.
    Set the flex property on the task windows
     */
}

.task {
    flex: 0 1 30%;
    transition: background-color 0.5s;
}


.task:nth-child(even) {
    background-color: green;
}

.task:hover {
    background-color: blue;
}

.winTitle {
    /* display: grid is an easy way to get reasonable positioning and flow */
    display: grid;
}

/* Centers dialogs */
dwc-frame {
    margin: auto;
}

/* 
Exercise: font size and weight for labelDay
- use class .labelDay
- use DWC custom properties:
--dwc-font-size-xl, --dwc-font-size-l
--dwc-font-weight-bold 
*/
.labelDay {
}

/* 
Exercise: background-color for winToolBar
Flex display exercise: add flex and flex-flow and gap to winToolBar
 */
 .winToolBar {
    display: flex;
    flex-flow: row;
    justify-content: flex-end;
    gap: var(--dwc-space-xs);
}


/*
Exercise: Inspecting the page
There is a DWC element that covers the whole screen when the TaskProperties window opens.
What is it called?
Create a CSS style targeting that element, and change its background color */
/* 

/* 
Exercise: Media Queries
Change some aspect of your CSS when the width is below/above a certain size
*/
@media (width < 600) {

}

@media (width <= 500px) {
    .winToolBar {
        flex-wrap: wrap;
    }

    .task {
        flex-basis: 100%;
        grid-template-columns: auto auto max-content;
        grid-template-rows: auto auto;
        gap: 1em;
        grid-template-areas: "title title flag" 
                            "check . delete";
    }

    .textDescription {
        display: none;
    }

    .dueNotice {
        display: none;
    }

    .winTitle {
        font-size: var(--dwc-font-size-s);
    }

}

@media (width > 1000px) {
    .winTitle {
        font-size: var(--dwc-font-size-xl);
    }
}


/* 
Exercise: Pseudo-Classes
Create CSS Selectors for :hover states
 */

 /* 
 Exercise: Transitions
 Create a transition effect on the style you used for 
 the hover states
 */
 
/* 
Bonus Exercise: Color of priority flags
Each priority flag has a class indicating its priority. 
Create CSS Style definitions to color the priority flags!
*/

.shirt {
    color: yellow;
}

dwc-checkbox::part(label) {
    display: none;
}